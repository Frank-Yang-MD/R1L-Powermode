/*
 * COPYRIGHT (C) 2018 MITSUBISHI ELECTRIC CORPORATION
 * ALL RIGHTS RESERVED
 */

// LCOV_EXCL_START
// This is excluded from a unit test coverage report because this needed solely for logging purposes
// and has no logic.

#include "VehiclePowerDaemonLog.h"
#include <string>
#include <unistd.h>

namespace com {
namespace mitsubishielectric {
namespace ahu {
namespace vehiclepwrmgr {
namespace impl {

void InitializeVehiclePowerDaemonLogMessages()
{
    using namespace com::mitsubishielectric::ahu::common;

    const LogMessageFormats vehiclePowerDaemonLogMessages = {
        {LogId::AndroidInit_propertySet_Setting_property,
         "VPD.AndroidInit::propertySet: Setting property %s",
         {DisplayTypeString{150, "propName"}}},
        {LogId::VpdStateMachine_transitionTo_State_machine_is_going_to_empty_state,
         "VPD.VpdStateMachine::transitionTo: State machine is going to empty state (new state is "
         "null)"},
        {LogId::VpdStateMachine_transitionTo_Transition,
         "VPD.VpdStateMachine::transitionTo: Transition %s",
         {DisplayTypeString{150, "state"}}},
        {LogId::VpdStateMachine_onSubscribeNative_id_state,
         "VPD.VpdStateMachine::onSubscribeNative: id '%d', state '%s'",
         {DisplayTypeDecInt32{"id"}, DisplayTypeString{150, "state"}}},
        {LogId::VpdStateMachine_onSubscribeVps_id_state,
         "VPD.VpdStateMachine::onSubscribeVps: id '%d', state '%s'",
         {DisplayTypeDecInt32{"id"}, DisplayTypeString{150, "state"}}},
        {LogId::VpdStateMachine_onStartCompleteCpuCom_state,
         "VPD.VpdStateMachine::onStartCompleteCpuCom: state '%s'",
         {DisplayTypeString{150, "state"}}},
        {LogId::VpdStateMachine_onStartCompleteVps_state,
         "VPD.VpdStateMachine::onStartCompleteVps: state '%s'",
         {DisplayTypeString{150, "state"}}},
        {LogId::VpdStateMachine_onStopCompleteNative_id_state,
         "VPD.VpdStateMachine::onStopCompleteNative: id '%d', state '%s'",
         {DisplayTypeDecInt32{"id"}, DisplayTypeString{150, "state"}}},
        {LogId::VpdStateMachine_onStopCompleteLog_state,
         "VPD.VpdStateMachine::onStopCompleteLog: state '%s'",
         {DisplayTypeString{150, "state"}}},
        {LogId::VpdStateMachine_onAppStopCompleteVps_state,
         "VPD.VpdStateMachine::onAppStopCompleteVps: state '%s'",
         {DisplayTypeString{150, "state"}}},
        {LogId::VpdStateMachine_onFwStopCompleteVps_state,
         "VPD.VpdStateMachine::onFwStopCompleteVps: state '%s'",
         {DisplayTypeString{150, "state"}}},
        {LogId::SubscriptionNotificationDecorator_onSubscribeVps_client_id,
         "VPD.SubscriptionNotificationDecorator::onSubscribeVps: Client id '%d'",
         {DisplayTypeDecInt32{"id"}}},
        {LogId::SubscriptionNotificationDecorator_onSubscribeNative_client_id,
         "VPD.SubscriptionNotificationDecorator::onSubscribeNative: Client id '%d'",
         {DisplayTypeDecInt32{"id"}}},
        {LogId::StateHolder_ctor_create_instance_Default_state,
         "VPD.StateHolder::ctor: create instance. Default state '%d'",
         {DisplayTypeDecInt32{"state"}}},
        {LogId::StateHolder_getVpdState_state,
         "VPD.StateHolder::getVpdState: State '%d'",
         {DisplayTypeDecInt32{"state"}}},
        {LogId::StateHolder_setVpdState_VPD_state_change_from_to,
         "VPD.StateHolder::setVpdState: VPD state change from '%d' to '%d'",
         {DisplayTypeDecInt32{"stateFrom"}, DisplayTypeDecInt32{"stateTo"}}},
        {LogId::StateSender_sendState_socket_id_state,
         "VPD.StateSender::sendState: Socket id '%d', state '%d'",
         {DisplayTypeDecInt32{"socket"}, DisplayTypeDecInt32{"state"}}},
        {LogId::StateSender_sendState_incoming_VPD_state_is_undefined_VPD_state,
         "VPD.StateSender::sendState: Incoming VPD state is undefined. VPD state '%d'",
         {DisplayTypeDecInt32{"state"}}},
        {LogId::ClientActions_notifySystemStateChange_client_id_state,
         "VPD.ClientActions::notifySystemStateChange: Client id '%d', state '%d'",
         {DisplayTypeDecInt32{"client"}, DisplayTypeDecInt32{"state"}}},
        {LogId::VehicleConfigProvider_ctor_Cant_read_javaTimeout_parameter,
         "VPD.VehicleConfigProvider::ctor: Can't read 'javaTimeout' parameter"},
        {LogId::VehicleConfigProvider_ctor_Cant_read_logdogTimeout_parameter,
         "VPD.VehicleConfigProvider::ctor: Can't read 'logdogTimeout' parameter"},
        {LogId::VehicleConfigProvider_ctor_Cant_read_nativeTimeout_parameter,
         "VPD.VehicleConfigProvider::ctor: Can't read 'nativeTimeout' parameter"},
        {LogId::VehicleConfigProvider_ctor_Cant_read_appResumeTimeout_parameter,
         "VPD.VehicleConfigProvider::ctor: Can't read 'appResumeTimeout' parameter"},
        {LogId::VehicleConfigProvider_ctor_Cant_read_logSaveTimeout_parameter,
         "VPD.VehicleConfigProvider::ctor: Can't read 'logSaveTimeout' parameter"},
        {LogId::VehicleConfigProvider_getInitString_Cant_read_nativeInitConfig_parameter,
         "VPD.VehicleConfigProvider::getInitString: Can't read 'nativeInitConfig' parameter"},
        {LogId::WaitForAppStopVps_onEnter, "VPD.WaitForAppStopVps::onEnter"},
        {LogId::WaitForAppStopVps_onTimeout, "VPD.WaitForAppStopVps::onTimeout"},
        {LogId::WaitForAppStopVps_onAppStopCompleteVps,
         "VPD.WaitForAppStopVps::onAppStopCompleteVps"},
        {LogId::WaitForAppStopVps_Timer_Is_Expired,
         "VPD.WaitForAppStopVps: AppStopVps Timer is expired."},
        {LogId::WaitForAppStopVps_coldboot_requested,
         "WaitForAppStopVps_coldboot_requested: property: '%s'",
         {DisplayTypeString{150, "state"}}},
        {LogId::WaitForFwStopVps_onEnter, "VPD.WaitForFwStopVps::onEnter"},
        {LogId::WaitForFwStopVps_onTimeout, "VPD.WaitForFwStopVps::onTimeout"},
        {LogId::WaitForFwStopVps_onFwStopCompleteVps, "VPD.WaitForFwStopVps::onStopCompleteVps"},
        {LogId::WaitForFwStopVps_Timer_Is_Expired,
         "VPD.WaitForFwStopVps: FwStopVps Timer is expired."},
        {LogId::WaitForFwStopVps_onStopFailedVps, "VPD.WaitForFwStopVps::onStopFailedVps"},
        {LogId::WaitForVpsStart_onEnter, "VPD.WaitForVpsStart::onEnter"},
        {LogId::WaitForVpsStart_onSubscribeVps, "VPD.WaitForVpsStart::onSubscribeVps"},
        {LogId::WaitForVpsStartComplete_onEnter, "VPD.WaitForVpsStartComplete::onEnter"},
        {LogId::WaitForVpsStartComplete_onStartCompleteVps,
         "VPD.WaitForVpsStartComplete::onStartCompleteVps"},
        {LogId::NotifyHelper_notifyAllNative_client_id_state,
         "VPD.NotifyHelper::notifyAllNative: Client id '%d', state '%d'",
         {DisplayTypeDecInt32{"client"}, DisplayTypeDecInt32{"state"}}},
        {LogId::NotifyRestart_onEnter, "VPD.NotifyRestart::onEnter"},
        {LogId::NotifyRestart_onExit, "VPD.NotifyRestart::onExit"},
        {LogId::WaitNativeAppStopProcessingComplete_onEnter_Number_of_subscribers,
         "VPD.WaitNativeAppStopProcessingComplete::onEnter: Number of subscribers '%d'",
         {DisplayTypeDecInt32{"quantity"}}},
        {LogId::WaitNativeAppStopProcessingComplete_onTimeout,
         "VPD.WaitNativeAppStopProcessingComplete::onTimeout"},
        {LogId::
             WaitNativeAppStopProcessingComplete_onStopCompleteNative_Number_of_stopped_subscribers,
         "VPD.WaitNativeAppStopProcessingComplete::onStopCompleteNative: Number of stopped "
         "subscribers "
         "'%d'",
         {DisplayTypeDecInt32{"quantity"}}},
        {LogId::WaitForLogDaemonStop_onEnter, "VPD.WaitForLogDaemonStop::onEnter"},
        {LogId::WaitForLogDaemonStop_onTimeout, "VPD.WaitForLogDaemonStop::onTimeout"},
        {LogId::WaitForLogDaemonStop_onStopCompleteLog,
         "VPD.WaitForLogDaemonStop::onStopCompleteLog"},
        {LogId::LogDaemonBusy_onEnter, "VPD.LogDaemonBusy::onEnter"},
        {LogId::LogDaemonBusy_onTimeout, "VPD.LogDaemonBusy::onTimeout"},
        {LogId::LogDaemonBusy_onTimeout_mLogdogCheckSavingStateTimer_is_expired,
         "VPD.LogDaemonBusy::onTimeout: mLogdogCheckSavingStateTimer is expired"},
        {LogId::LogDaemonBusy_onTimeout_mLogdogSaveStateTimer_is_expired,
         "VPD.LogDaemonBusy::onTimeout: mLogdogSaveStateTimer is expired"},
        {LogId::WaitForStartCpuCom_onEnter, "VPD.WaitForStartCpuCom::onEnter"},
        {LogId::WaitForStartCpuCom_onStartCompleteCpuCom,
         "VPD.WaitForStartCpuCom::onStartCompleteCpuCom"},
        {LogId::InitialState_onTimeout, "VPD.InitialState::onTimeout"},
        {LogId::Stop_onEnter, "VPD.Stop::onEnter"},
        {LogId::NativeRunnerManager_run_Cant_get_command_from_line,
         "VPD.NativeRunnerManager::run: Can't get command from line '%s'",
         {DisplayTypeString{150, "line"}}},
        {LogId::NativeRunnerManager_run_Cant_get_command_result_from_line,
         "VPD.NativeRunnerManager::run: Can't get command result from line '%s'",
         {DisplayTypeString{150, "line"}}},
        {LogId::StartNativeCommandResult_isDone_service_state,
         "VPD.StartNativeCommandResult::isDone: %s",
         {DisplayTypeString{150, "service and its state"}}},
        {LogId::StartNativeCommand_execute_Cant_set_property_to_value,
         "VPD.StartNativeCommand::execute: Can't set %s",
         {DisplayTypeString{150, "property and value"}}},
        {LogId::NativeRunnerManagerSequential_run_Config_is_empty,
         "VPD.NativeRunnerManagerSequential::run: Config is empty"},
        {LogId::NativeRunnerManagerSequential_run_Cant_get_command_from_line,
         "VPD.NativeRunnerManagerSequential::run: Can't get command from line '%s'",
         {DisplayTypeString{150, "line"}}},
        {LogId::NativeRunnerManagerSequential_run_List_with_commands_to_execute_is_empty,
         "VPD.NativeRunnerManagerSequential::run: List with commands to execute is empty"},
        {LogId::NativeRunnerManagerSequential_executeCmd_Run_command,
         "VPD.NativeRunnerManagerSequential::executeCmd: Run command '%s'",
         {DisplayTypeString{150, "command"}}},
        {LogId::NativeRunnerManagerSequential_executeCmd_Cant_get_command_result_from_line,
         "VPD.NativeRunnerManagerSequential::executeCmd: Can't get command result from line '%s'",
         {DisplayTypeString{150, "line"}}},
        {LogId::ConfigScriptCmdCreator_createCommand,
         "VPD.ConfigScriptCmdCreator::createCommand: %s",
         {DisplayTypeString{150, "error text"}}},
        {LogId::TimeoutHandler_Process_Wrong_event_index,
         "VPD.TimeoutHandler::Process: Wrong event, index '%d'",
         {DisplayTypeDecInt32{"index"}}},
        {LogId::LogdogStopCompleteHandler_Process_Wrong_event_index,
         "VPD.LogdogStopCompleteHandler::Process: Wrong event, index '%d'",
         {DisplayTypeDecInt32{"index"}}},
        {LogId::VpsSubscriptionHandler_Process_Wrong_event_index,
         "VPD.VpsSubscriptionHandler::Process: Wrong event, index '%d'",
         {DisplayTypeDecInt32{"index"}}},
        {LogId::UnsubscriptionHandlerLogdog_Process_Wrong_event_index,
         "VPD.UnsubscriptionHandlerLogdog::Process: Wrong event, index '%d'",
         {DisplayTypeDecInt32{"index"}}},
        {LogId::UnsubscriptionHandler_Process_Wrong_event_index,
         "VPD.UnsubscriptionHandler::Process: Wrong event, index '%d'",
         {DisplayTypeDecInt32{"index"}}},
        {LogId::DisconnectHandler_Process_Wrong_event_index,
         "VPD.DisconnectHandler::Process: Wrong event, index '%d'",
         {DisplayTypeDecInt32{"index"}}},
        {LogId::SubscriptionHandler_Process_Wrong_event_index,
         "VPD.SubscriptionHandler::Process: Wrong event, index '%d'",
         {DisplayTypeDecInt32{"index"}}},
        {LogId::EventHandling_run_mEventQueueHandler_is_nullptr,
         "VPD.EventHandling::run: mEventQueueHandler is nullptr"},
        {LogId::EventHandling_stop_mEventQueueHandler_is_nullptr,
         "VPD.EventHandling::stop: mEventQueueHandler is nullptr"},
        {LogId::CpuStartHandler_Process_Wrong_event_index,
         "VPD.CpuStartHandler::Process: Wrong event, index '%d'",
         {DisplayTypeDecInt32{"index"}}},
        {LogId::SubscriptionHandlerLogdog_Process_Wrong_event_index,
         "VPD.SubscriptionHandlerLogdog::Process: Wrong event, index '%d'",
         {DisplayTypeDecInt32{"index"}}},
        {LogId::VpsUnsubscriptionHandler_Process_Wrong_event_index,
         "VPD.VpsUnsubscriptionHandler::Process: Wrong event, index '%d'",
         {DisplayTypeDecInt32{"index"}}},
        {LogId::VpsStopCompleteHandler_Process_Wrong_event_index,
         "VPD.VpsStopCompleteHandler::Process: Wrong event, index '%d'",
         {DisplayTypeDecInt32{"index"}}},
        {LogId::VpsStartHandler_Process_Wrong_event_index,
         "VPD.VpsStartHandler::Process: Wrong event, index '%d'",
         {DisplayTypeDecInt32{"index"}}},
        {LogId::EventQueueHandler_run_No_event_handler_found_for_event_index,
         "VPD.EventQueueHandler::run: No event handler found for event index '%d'",
         {DisplayTypeDecInt32{"index"}}},
        {LogId::EventQueueHandler_run_Handler_for_event_is_null,
         "VPD.EventQueueHandler::run: Handler for event '%d' is null",
         {DisplayTypeDecInt32{"event"}}},
        {LogId::EventQueueHandler_setEventHandler_Event_handler_for_event_index_already_exists,
         "VPD.EventQueueHandler::setEventHandler: Event handler for event index '%d' already "
         "exists",
         {DisplayTypeDecInt32{"index"}}},
        {LogId::NativeStopCompleteHandler_Process_Wrong_event_index,
         "VPD.NativeStopCompleteHandler::Process: Wrong event, index '%d'",
         {DisplayTypeDecInt32{"index"}}},
        {LogId::CommandParser_onReceiveCommand_unsupported_command_received,
         "VPD.CommandParser::onReceiveCommand: Unsupported command received"},
        {LogId::CommandParser_onError_command_received_with_error_code,
         "VPD.CommandParser::onError: {'%X', '%X'} command received with error code '%d'",
         {DisplayTypeHexUInt8{"first"}, DisplayTypeHexUInt8{"second"},
          DisplayTypeDecInt32{"errroCode"}}},
        {LogId::CpuComClient_start_CpuCom_is_not_initialized,
         "VPD.CpuComClient::start: CpuCom is not initialized"},
        {LogId::CpuComClient_stop_CpuCom_is_not_initialized,
         "VPD.CpuComClient::stop: CpuCom is not initialized"},
        {LogId::CpuComClient_sendAdtrRequest_CpuCom_is_not_initialized,
         "VPD.CpuComClient::sendAdtrRequest: CpuCom is not initialized"},
        {LogId::CpuComClient_sendStartComplete_CpuCom_is_not_initialized,
         "VPD.CpuComClient::sendStartComplete: CpuCom is not initialized"},
        {LogId::CpuComClient_sendShutdownCancelAccept_CpuCom_is_not_initialized,
         "VPD.CpuComClient::sendShutdownCancelAccept: CpuCom is not initialized"},
        {LogId::CpuComClient_sendShutdownProcessingStart_CpuCom_is_not_initialized,
         "VPD.CpuComClient::sendShutdownProcessingStart: CpuCom is not initialized"},
        {LogId::CpuComClient_sendShutdownCancelComplete_is_not_initialized,
         "VPD.CpuComClient::sendShutdownCancelComplete: CpuCom is not initialized"},
        {LogId::CpuComClient_sendWdtrRequest_CpuCom_is_not_initialized,
         "VPD.CpuComClient::sendWdtrRequest: CpuCom is not initialized"},
        {LogId::CpuComClient_dtor_CpuCom_is_not_initialized,
         "VPD.CpuComClient::dtor: CpuCom is not initialized"},
        {LogId::SubscriptionManager_add_Adding_new_subscriber_client_id,
         "VPD.SubscriptionManager::add: Adding new subscriber, client id '%d'",
         {DisplayTypeDecInt32{"id"}}},
        {LogId::SubscriptionManager_add_Subscription_Notification_is_not_set,
         "VPD.SubscriptionManager::add: Subscription Notification is not set"},
        {LogId::SubscriptionManager_remove_Removing_subscriber_client_id,
         "VPD.SubscriptionManager::remove: Removing subscriber, client id '%d'",
         {DisplayTypeDecInt32{"id"}}},
        {LogId::SubscriptionManager_setVpsID_Set_VPS_id_to,
         "VPD.SubscriptionManager::setVpsID: Set VPS id to '%d'",
         {DisplayTypeDecInt32{"id"}}},
        {LogId::SubscriptionManager_setVpsID_VPS_subscription_was_already_set,
         "VPD.SubscriptionManager::setVpsID: VPS subscription was already set"},
        {LogId::SubscriptionManager_setVpsID_Subscription_Notification_is_not_set,
         "VPD.SubscriptionManager::setVpsID: Subscription Notification is not set"},
        {LogId::SubscriptionManager_setLogID_Logdog_subscription_was_already_set,
         "VPD.SubscriptionManager::setLogID: Logdog subscription was already set"},
        {LogId::SubscriptionManager_setLogID_Bootdaemon_subscription_was_already_set,
         "VPD.SubscriptionManager::setLogID: BootDaemon subscription was already set"},
        {LogId::SubscriptionManager_disconnect_Subscriber_has_disconnected_client_id,
         "VPD.SubscriptionManager::disconnect: Subscriber has disconnected, client id '%d'",
         {DisplayTypeDecInt32{"id"}}},
        {LogId::WakeUpEventDetector_cannotOpenNode,
         "VPD.WakeUpEventDetector: Cannot open wake up node"},
        {LogId::WakeUpEventDetector_pollError,
         "VPD.WakeUpEventDetector: Error polling wake up node, reopening, retryCount %d",
         {DisplayTypeDecInt32{"retryCount"}}},
        {LogId::WakeUpEventDetector_valueFromNode,
         "VPD.WakeUpEventDetector: '%s' - value from node",
         {DisplayTypeString{8, "value"}}},
        {LogId::WakeUpEventDetector_wakeUpEventDetected,
         "VPD.WakeUpEventDetector: Wake up event detected!"},
        {LogId::WakeUpEventDetector_pollError_retryExceeded,
         "VPD.WakeUpEventDetector: Error polling wake up node, retry counter exceeded, stop "
         "polling"},
        {LogId::LogDaemonActions_isLogSavingComplete, "VPD.LogDaemonActions::isLogSavingComplete"},
        {LogId::LogDaemonActions_isLogSavingComplete_mLogDog_instantiated,
         "VPD.LogDaemonActions::isLogSavingComplete: mLogDog instantiated"},
        {LogId::LogDaemonActions_isLogSavingComplete_LogDogs_log_saving_state_is,
         "VPD.LogDaemonActions::isLogSavingComplete: LogDog's log saving state is '%s'",
         {DisplayTypeString{150, "state"}}},
        {LogId::LogDaemonActions_serviceDied_Logdog_service_died,
         "VPD.LogDaemonActions::serviceDied: Logdog service died"},
        {LogId::LogDaemonActions_isLogSavingComplete_service_unavailable,
         "VPD.LogDaemonActions::isLogSavingComplete: Logdog service unavailable"},
        {LogId::ShutdownManager_performShutdownAction,
         "VPD.ShutdownManager::performShutdownAction"},
        {LogId::ShutdownManager_performShutdownAction_Undefined_shutdown_action,
         "VPD.ShutdownManager::performShutdownAction: Undefined shutdown action"},
        {AbstractResetTimerHandler_start_mTimer_is_nullptr,
         "VPD.AbstractResetTimerHandler::start: mTimer is nullptr"},
        {AbstractResetTimerHandler_onTimeout_mTimer_is_nullptr,
         "VPD.AbstractResetTimerHandler::onTimeout: mTimer is nullptr"},
        {AbnormalTimerHandler_resetRequestSent,
         "VPD.AbnormalTimerHandler::performResetAction: reset request sent"},
        {WatchDogTimerHandler_resetRequestSent,
         "VPD.WatchDogTimerHandler::performResetAction: reset request sent"},
        {WakeUpManager_wakeUp, "VPD.WakeUpManager::wakeUp"},
        {LogId::ParamByteEqualCondition_ctor_Cant_read_Byte_parameter_from_config,
         "VPD.ParamByteEqualCondition::isSatisfied: Can't read Byte parameter from config"},
        {LogId::WakeLockManager_acquireWakeLock, "VPD.WakeLockManager::acquireWakeLock"},
        {LogId::WakeLockManager_acquireWakeLock_Wake_lock_acquired,
         "VPD.WakeLockManager::acquireWakeLock: Wake lock acquired"},
        {LogId::WakeLockManager_acquireWakeLock_Cant_aquire_wakelock_error_code,
         "VPD.WakeLockManager::acquireWakeLock: Can't aquire wakelock, error code '%d'",
         {DisplayTypeDecInt32{"errorCode"}}},
        {LogId::WakeLockManager_releaseWakeLock, "VPD.WakeLockManager::releaseWakeLock"},
        {LogId::WakeLockManager_releaseWakeLock_Wake_lock_released,
         "VPD.WakeLockManager::releaseWakeLock: Wake lock released"},
        {LogId::WakeLockManager_releaseWakeLock_Cant_release_wakelock_error_code,
         "VPD.WakeLockManager::releaseWakeLock: Can't release wakelock, error code '%d'",
         {DisplayTypeDecInt32{"errorCode"}}},
        {LogId::WakeLockManager_acquireWakeLock_Cant_aquire_wakelock_errno,
         "VPD.WakeLockManager::acquireWakeLock: Can't aquire wakelock, errno '%d', msg '%s'",
         {DisplayTypeDecInt32{"errno"}, DisplayTypeString{512, "message"}}},
        {LogId::WakeLockManager_releaseWakeLock_Cant_release_wakelock_errno,
         "VPD.WakeLockManager::releaseWakeLock: Can't release wakelock, errno '%d', msg '%s'",
         {DisplayTypeDecInt32{"errno"}, DisplayTypeString{512, "message"}}},
        {LogId::WakeLockManager_enableWakeLocks, "VPD.WakeLockManager::enableWakeLocks"},
        {LogId::WakeLockManager_enableWakeLocks_Cant_enable_wakelocks,
         "VPD.WakeLockManager::enableWakeLocks: Can't enable wakelocks, errno '%d', msg '%s'",
         {DisplayTypeDecInt32{"errno"}, DisplayTypeString{512, "message"}}},
        {LogId::WakeLockManager_disableWakeLocks, "VPD.WakeLockManager::disableWakeLocks"},
        {LogId::WakeLockManager_disableWakeLocks_Cant_disable_wakelocks,
         "VPD.WakeLockManager::disableWakeLocks: Can't disable wakelocks, errno '%d', msg '%s'",
         {DisplayTypeDecInt32{"errno"}, DisplayTypeString{512, "message"}}},
        {VpmBridgeDaemonAdapter_Cannot_acquire_VpmBridgeDaemon_instance,
         "VPD.VpmBridgeDaemonAdapter: %s: Cannot acquire VpmBridgeDaemon instance",
         {DisplayTypeString{150, "action"}}},
        {VpmBridgeDaemonAdapter_Request_to_VpmBridgeDaemon,
         "VPD.VpmBridgeDaemonAdapter: %s request to VpmBridgeDaemon",
         {DisplayTypeString{150, "action"}}},
        {LogId::WaitForModulesUnload_onTimeout_timeout,
         "VPD.WaitForModulesUnload::onTimeout: pre-suspend script hasn't reported success, "
         "transition "
         "to next state due to timeout"},
        {LogId::WaitForModulesUnload_onTimeout_success,
         "VPD.WaitForModulesUnload::onTimeout: pre-suspend script executed successfully"},
        {LogId::WaitForModulesLoadBeforeUnload_onTimeout_timeout,
         "VPD.WaitForModulesLoadBeforeUnload::onTimeout: post-wakeup script hasn't reported "
         "success, "
         "transition to next state due to timeout"},
        {LogId::WaitForModulesLoadBeforeUnload_onTimeout_success,
         "VPD.WaitForModulesLoadBeforeUnload::onTimeout: post-wakeup script executed successfully"},
        {LogId::WaitNativeAppStopProcessingComplete_Timer_Is_Expired,
         "VPD.WaitNativeAppStopProcessingComplete: Timer is expired."},
        {LogId::VpdStateMachine_onStopFailedVps_state,
         "VPD.VpdStateMachine::onStopFailedVps: state '%s'",
         {DisplayTypeString{150, "state"}}},
        {LogId::CpuComClient_sendSelfRebootTrue_CpuCom_is_not_initialized,
         "VPD.CpuComClient::sendSelfRebootTrue: CpuCom is not initialized"},
        {LogId::StartNativeCmdConditional_execute_Condition_is_not_satisfied_cmd_not_executed,
         "VPD.StartNativeCmdConditional::execute: Condition is not satisfied, cmd not executed"},
        {LogId::ParamByteEqualCondition_ctor_Condition_is_not_satisfied_expected_actual,
         "VPD.ParamByteEqualCondition::ctor: Condition is not satisfied, expected '%u', actual "
         "'%u'",
         {DisplayTypeDecUInt8("expected value"), DisplayTypeDecUInt8("actual value")}},

        {LogId::CommandParser_onReceiveCommand_cmd_subcmd,
         "VPD.CommandParser::onReceiveCommand: cmd '%X',  subcmd '%X'",
         {DisplayTypeHexUInt8{"cmd"}, DisplayTypeHexUInt8{"subcmd"}}},

        {LogId::CpuComClient_start, "VPD.CpuComClient::start"},

        {LogId::CpuComClient_stop, "VPD.CpuComClient::stop"},

        {LogId::CpuComClient_sendStartComplete, "VPD.CpuComClient::sendStartComplete"},

        {LogId::CpuComClient_sendShutdownCancelAccept,
         "VPD.CpuComClient::sendShutdownCancelAccept"},

        {LogId::CpuComClient_sendShutdownProcessingStart,
         "VPD.CpuComClient::sendShutdownProcessingStart"},

        {LogId::CpuComClient_sendShutdownCancelComplete,
         "VPD.CpuComClient::sendShutdownCancelComplete"},

        {LogId::CpuComClient_sendSelfRebootTrue, "VPD.CpuComClient_sendSelfRebootTrue"},
        {LogId::VpdStateMachine_onPowerStateChange_state,
         "VPD.VpdStateMachine::onPowerStateChange: state '%s'",
         {DisplayTypeString{150, "state"}}},
        {LogId::PowerStateHolder_onPowerStateChange,
         "VPD.PowerStateHolder::onPowerStateChange: new state - %s",
         {DisplayTypeString{150, "powerState"}}},
        {LogId::VcpuPowerStateChangeHandler_Invalid_Vpd_state,
         "VPD.VcpuPowerStateChangeHandler::Process: %s",
         {DisplayTypeString{150, "msg"}}},

        {LogId::WaitForVpsStartComplete_onStartFailedVps,
         "VPD.WaitForVpsStartComplete::onStartFailedVps"},
        {LogId::VpdStateMachine_onStartFailedVps_state,
         "VPD.VpdStateMachine::onStartFailedVps: state '%s'",
         {DisplayTypeString{150, "state"}}},
        {LogId::InitialState_onTimeout_vpdRestarted,
         "VPD.InitialState::onTimeout: VPD has restarted, transition to NormalOperation"},
        {LogId::NotifyHelper_noNativeSubscribers,
         "VPD.NotifyHelper::notifyAllNative: No native service are subscribed."},
        {LogId::NotifyHelper_vpsNotSubscribed,
         "VPD.NotifyHelper::notifyAllNative: VPS not subscribed."},
        {LogId::NotifyHelper_logdogNotSubscribed,
         "VPD.NotifyHelper::notifyAllNative: LogDog not subscribed."},
        {LogId::ParamStringEqualCondition_ctor_Cant_read_String_parameter_from_config,
         "VPD.ParamStringEqualCondition::isSatisfied: Can't read String parameter from config"},
        {LogId::ParamStringEqualCondition_ctor_Condition_is_not_satisfied_expected_actual,
         "VPD.ParamStringEqualCondition::ctor: Condition is not satisfied, expected '%s', actual "
         "'%s'",
         {DisplayTypeString{150, "expected value"}, DisplayTypeString{150, "actual value"}}},
        {LogId::VpsFwResumeCompleteHandler_Wrong_event_index,
         "VPD.VpsFwResumeCompleteHandler::Process: Wrong event, index '%d'",
         {DisplayTypeDecInt32{"index"}}},
        {LogId::VpdStateMachine_onFwResumeComplete_state,
         "VPD.VpdStateMachine::onFwResumeComplete: state '%s'",
         {DisplayTypeString{150, "state"}}},
        {LogId::VpdStateMachine_onAppResumeComplete_state,
         "VPD.VpdStateMachine::onAppResumeComplete: state '%s'",
         {DisplayTypeString{150, "state"}}},
        {LogId::ResumeNative_onEnter, "VPD.ResumeNative::onEnter"},
        {LogId::WaitForFwResumeComplete_onEnter, "VPD.WaitForFwResumeComplete::onEnter"},
        {LogId::WaitForFwResumeComplete_onExit, "VPD.WaitForFwResumeComplete::onExit"},
        {LogId::WaitForFwResumeComplete_onFwResumeComplete,
         "VPD.WaitForFwResumeComplete::onFwResumeComplete"},
        {LogId::WaitForFwResumeComplete_onTimeout, "VPD.WaitForFwResumeComplete::onTimeout"},
        {LogId::WaitForFwResumeComplete_timerIsExpired,
         "VPD.WaitForFwResumeComplete: App resume efw timer is expired"},
        {LogId::VpsFwRestartCompleteHandler_Wrong_event_index,
         "VPD.VpsFwRestartCompleteHandler::Process: Wrong event, index '%d'",
         {DisplayTypeDecInt32{"index"}}},
        {LogId::VpdStateMachine_onFwRestartComplete_state,
         "VPD.VpdStateMachine::onFwRestartComplete: state '%s'",
         {DisplayTypeString{150, "state"}}},
        {LogId::VpdStateMachine_onAppRestartComplete_state,
         "VPD.VpdStateMachine::onAppRestartComplete: state '%s'",
         {DisplayTypeString{150, "state"}}},
        {LogId::RestartNative_onEnter, "VPD.RestartNative::onEnter"},
        {LogId::WaitForFwRestartComplete_onEnter, "VPD.WaitForFwRestartComplete::onEnter"},
        {LogId::WaitForFwRestartComplete_onFwRestartComplete,
         "VPD.WaitForFwRestartComplete::onFwRestartComplete"},
        {LogId::CpuComClient_sendMainStartComplete,
         "VPD.CpuComClient::sendMainStartComplete: sending Main Start Complete notification "
         "(7187h)"},
        {LogId::CpuComClient_sendMainStartComplete_CpuCom_is_not_initialized,
         "VPD.CpuComClient::sendMainStartComplete: ERROR: CpuCom is not initialized"},
        {LogId::VehicleConfigProvider_ctor_Cant_read_appResumeAppTimeout_parameter,
         "VPD.VehicleConfigProvider::ctor: Can't read 'appResumeAppTimeout' parameter"},

        {LogId::WaitForAppResumeComplete_onEnter, "VPD.WaitForAppResumeComplete_onEnter::onEnter"},
        {LogId::WaitForAppResumeComplete_onExit, "VPD.WaitForAppResumeComplete::onExit"},
        {LogId::WaitForAppResumeComplete_onAppResumeComplete,
         "VPD.WaitForAppResumeComplete::WaitForAppResumeComplete_onAppResumeComplete"},
        {LogId::WaitForAppResumeComplete_onTimeout, "VPD.WaitForAppResumeComplete::onTimeout"},
        {LogId::WaitForAppResumeComplete_timerIsExpired,
         "VPD.WaitForAppResumeComplete: App resume efw timer is expired"},

        {LogId::WaitForFwRestartComplete_onTimeout, "VPD.WaitForFwRestartComplete::onTimeout"},
        {LogId::WaitForFwRestartComplete_timerIsExpired,
         "VPD.WaitForFwRestartComplete: App restart efw timer is expired"},

        {LogId::WaitForAppRestartComplete_onEnter, "VPD.WaitForAppRestartComplete::onEnter"},
        {LogId::WaitForAppRestartComplete_onExit, "VPD.WaitForAppRestartComplete::onExit"},
        {LogId::WaitForAppRestartComplete_onAppRestartComplete,
         "VPD.WaitForAppRestartComplete::WaitForAppRestartComplete_onAppRestartComplete"},
        {LogId::WaitForAppRestartComplete_onTimeout, "VPD.WaitForAppRestartComplete::onTimeout"},
        {LogId::WaitForAppRestartComplete_timerIsExpired,
         "VPD.WaitForAppRestartComplete: App restart efw timer is expired"},
        {LogId::VpsAppResumeCompleteHandler_Wrong_event_index,
         "VPD.VpsAppResumeCompleteHandler::Process: Wrong event, index '%d'",
         {DisplayTypeDecInt32{"index"}}},
        {LogId::VpsAppRestartCompleteHandler_Wrong_event_index,
         "VPD.VpsAppRestartCompleteHandler::Process: Wrong event, index '%d'",
         {DisplayTypeDecInt32{"index"}}},
        {LogId::VpdMessageServer_start_failed,
         "VPD.VpdMessageServer: Could not start message server!"},
        {LogId::VpdMessageServer_unknown_pid,
         "VPD.VpdMessageServer: Attempt to send notification '%d' to unknown pid '%d'!",
         {DisplayTypeDecInt32{"notification"}, DisplayTypeDecInt32{"pid"}}},
        {LogId::WaitNativeAppStopProcessingComplete_onTimeout_NoStopCompleteFrom,
         "WaitNativeAppStopProcessingComplete: no stop complete from '%s'",
         {DisplayTypeString{150, "ids"}}},
        {LogId::BootDaemonEventHandler_processBootDaemonEvent_Wrong_event_index,
         "VPD.BootDaemonEventHandler::processBootdEvent: Wrong event, index '%d'",
         {DisplayTypeDecInt32{"index"}}},
        {LogId::BootDaemonEventHandler_Process_Wrong_ClientId,
         "VPD.BootDaemonEventHandler::processBootdEvent: Wrong clientId, ID: '%d'",
         {DisplayTypeDecInt32{"index"}}},
        {LogId::HmiEventsHandler_Process_Wrong_event_index,
         "VPD.HmiEventsHandler::Process: Wrong event, index '%d'",
         {DisplayTypeDecInt32{"index"}}},
        {LogId::HmiEventsHandler_processVpsEvent_Wrong_event_index,
         "VPD.HmiEventsHandler::processVpsEvent: Wrong event, index '%d'",
         {DisplayTypeDecInt32{"index"}}},
        {LogId::VpdStateMachine_onVpsUnmountComplete_state,
         "VPD.VpdStateMachine::onVpsUnmountComplete: state '%s'",
         {DisplayTypeString{150, "state"}}},
        {LogId::VpsMountHandler_Process_Wrong_event_index,
         "VPD.VpsMountHandler::processVpsEvent: Wrong event, index '%d'",
         {DisplayTypeDecInt32{"index"}}},
        {LogId::WaitForUnmount_onEnter, "VPD.WaitForUnmount::onEnter"},
        {LogId::WaitForUnmount_onVpsUnmountComplete, "VPD.WaitForUnmount::onVpsUnmountComplete"},
        {LogId::WaitForUnmount_onTimeout, "VPD.WaitForUnmount::onTimeout"},
        {LogId::WaitForUnmount_timerIsExpired, "VPD.WaitForUnmount: timer is expired"},
        {LogId::WaitForMount_onEnter, "VPD.WaitForMount::onEnter"},
        {LogId::WaitForLogSaving_OnTimeout, "VPD.WaitForLogSaving::onTimeout"},
        {LogId::WaitForLogSaving_Timer_Is_Expired, "VPD.WaitForLogSaving: Timer is expired."},
        {LogId::WaitBeforeSendingFwStopVps_onTimeout, "VPD.WaitBeforeSendingFwStopVps::onTimeout"},
        {LogId::WaitBeforeSendingFwStopVps_Timer_Is_Expired,
         "VPD.WaitBeforeSendingFwStopVps: Timer is expired."},
        {LogId::WaitBeforeSendingAppStopNativeServices_onTimeout,
         "VPD.WaitBeforeSendingAppStopNativeServices::onTimeout"},
        {LogId::WaitBeforeSendingAppStopNativeServices_Timer_Is_Expired,
         "VPD.WaitBeforeSendingAppStopNativeServices: Timer is expired."},
        {LogId::BootDaemonEventHandler_Process, "VPD.BootDaemonEventHandler::process: event '%s'"},
        {LogId::HmiEventsHandler_processVpsEvent_sendNotification,
         "VPD.HmiEventsHandler::processVpsEvent: sending to BootDaemon event '%s'"},
        {LogId::ShutdownProcessingStartSentHandler_Process_Wrong_event_index,
         "VPD.ShutdownProcessingStartSentHandler::Process: Wrong event, index '%d'",
         {DisplayTypeDecInt32{"index"}}},
        {LogId::VpdStateMachine_onShutdownProcessingStartSent_state,
         "VPD.VpdStateMachine::onShutdownProcessingStartSent: state '%s'",
         {DisplayTypeString{150, "state"}}},
        {LogId::ShutdownProcessingStartStatusReceiver_delivered_false,
         "VPD.ShutdownProcessingStartStatusReceiver::onDeliveryStatus: deliveryStatus: false"},
        {LogId::ResumeProcessingStartCompleteSentHandler_Process_Wrong_event_index,
         "VPD.ResumeProcessingStartCompleteSentHandler::Process: Wrong event, index '%d'",
         {DisplayTypeDecInt32{"index"}}},
        {LogId::VpdStateMachine_onResumeProcessingStartCompleteSentSuccess_state,
         "VPD.VpdStateMachine::onResumeProcessingStartCompleteSentSuccess: state '%s'",
         {DisplayTypeString{150, "state"}}},
        {LogId::VpdStateMachine_onResumeProcessingStartCompleteSentFailure_state,
         "VPD.VpdStateMachine::onResumeProcessingStartCompleteSentFailure: state '%s'",
         {DisplayTypeString{150, "state"}}},
        {LogId::VpdStateMachine_onWakeUp_state,
         "VPD.VpdStateMachine::onWakeUp: state '%s'",
         {DisplayTypeString{150, "state"}}},
        {LogId::TimerManager_changeTimer,
         "VPD.TimerManager::changeTimerHandler: New timer handler is '%s'",
         {DisplayTypeString{150, "timer"}}},
        {LogId::TimerManager_onTimeout_skipEvent,
         "VPD.TimerManager::onTimeout: Current timer handler is None. Skip onTimeout event."},
        {LogId::SystemPowerStateListener_onPowerStateChange_sendShutdownCancelAccept,
         "VPD. SystemPowerStateListener::onPowerStateChange: Send shutdown cancel accept"},
        {LogId::VpdStateMachine_onDisconnectVps_state,
         "VPD.VpdStateMachine::onDisconnectVps: state '%s'",
         {DisplayTypeString{150, "state"}}}

    };

    using com::mitsubishielectric::ahu::common::InitializeFunctionID;
    InitializeFunctionID(LogFuncId::VPD, vehiclePowerDaemonLogMessages);
}

void TerminateVehiclePowerDaemonLogMessages()
{
    using com::mitsubishielectric::ahu::common::TerminateFunctionID;
    TerminateFunctionID(LogFuncId::VPD);
}

}  // namespace impl
}  // namespace vehiclepwrmgr
}  // namespace ahu
}  // namespace mitsubishielectric
}  // namespace com

// LCOV_EXCL_STOP
